package com.interest.mm.borrowinginterest;import java.math.BigDecimal;import java.text.DecimalFormat;import java.text.ParseException;import java.text.SimpleDateFormat;import java.util.ArrayList;import java.util.Date;import java.util.List;/** * Created by Bobozai09 on 2018/6/15. * 起止时间 利率倍数 等计算 */public class RateOfInterestUtil {    // 起止时间    private Date startTime;    private Date endTime;    //利率倍数    private  int multipleRate;    //贷款类型选择    private  int rateType;    //输入计算金额    private double money;    private  static List<RateParameter> list_parameter=RateParameter.initBigDecimalData();    public RateOfInterestUtil(){    }    public RateOfInterestUtil(Date startTime, Date endTime,                              int multipleRate, int rateType, double money){        this.endTime=endTime;        this.multipleRate=multipleRate;        this.rateType=rateType;        this.startTime=startTime;        this.money=money;    }    //贷款类型参数    public class RateType{        //六月以内        public static final int  WITHIN_JUNE=0;        //六月到一年        public static final int  JUNE_TO_ONE_YEAR=1;        //一年到三年        public static final int  ONE_YEAR_TO_THERR_YEARS=2;        //三年到五年        public static final int  THERR_YEARS_TO_FIVE_YESRS=3;        //五年以上        public static final int  MORE_THAN_FIVE_YEARS=4;    }    //利率倍数    public class MultipleRate{        //六月以内        public static final int  WITHIN_JUNE=0;        //六月到一年        public static final int  JUNE_TO_ONE_YEAR=1;        //一年到三年        public static final int  ONE_YEAR_TO_THERR_YEARS=2;        //三年到五年        public static final int  THERR_YEARS_TO_FIVE_YESRS=3;        //五年以上        public static final int  MORE_THAN_FIVE_YEARS=4;    }    //明细集合    private List<Calculation>   calculation_info;    private  List<Double> integers;    private int index=0;    private double countMoney;    //计算单个利润    public List<String >  oneCompelt(){        DecimalFormat df=new DecimalFormat("0.00");        BigDecimal dob_v;        if(rateType==1){            dob_v=new BigDecimal(list_parameter.get(index).getWithinJune());        }else        {            dob_v=new BigDecimal(list_parameter.get(index).getJuneToOneYear());        }        BigDecimal bd6 = new BigDecimal("100");        List<String> strings=new ArrayList<>();        double  one =dob_v.multiply(bd6).doubleValue();        strings.add("银行基准利率:"+(df.format(one))+"%");        strings.add("计息天数(天):"+getDays(startTime,endTime)+"");        strings.add("借贷利息(元)："+money+"X("+df.format(one)+"%/360)X"+RateOfInterestUtil.getDays(startTime,endTime)+"X"+multipleRate+"="+ df.format(countMoney));        return strings;    }    /**     * 两个时间之间的天数     *     * @param     * @param     * @return     */    public   double   calculateMoney() {        calculation_info=new ArrayList<>();        integers=new ArrayList<>();        double count = 0;        int startIndex = 35;        int endIndex = 35;        for (int i = 0; i < list_parameter.size(); i++) {            if (list_parameter.get(i).                    getCalculateTiem().                    getTime() > startTime.getTime()) {                startIndex = i;                break;            }        }        for (int i = 0; i < list_parameter.size(); i++) {            if (list_parameter.get(i).                    getCalculateTiem().                    getTime() > endTime.getTime()) {                endIndex = i;                break;            }        }       /* int caseyear = list_parameter.get(startIndex - 1).getCalculateTiem().getYear();        for (int i = startIndex; i < endIndex; i++)            if (caseyear != list_parameter.get(i).getCalculateTiem().getYear()) {                count = list_parameter.get(i).getJuneToOneYear();            }*/        switch (rateType){            case MultipleRate.WITHIN_JUNE:                //计算利率                count=money*((list_parameter.get(startIndex-1).getWithinJune()/360)*multipleRate)*getDays(startTime,endTime);                index=startIndex-1;                countMoney=count;                break;            case MultipleRate.JUNE_TO_ONE_YEAR:                if(startTime.getYear()==endTime.getYear()){                    count=money*((list_parameter.get(startIndex-1).                            getJuneToOneYear()/360)*multipleRate)*getDays(startTime,endTime);                }else {                    count=money*((list_parameter.get(startIndex-1).                            getJuneToOneYear()/360)*multipleRate)*getDays(startTime,getYearEndData(startTime));                    calculation_info.add(getOneCal(                            formatDate(startTime)+"-"+formatDate(getYearEndData(startTime)),                            getStringNum(list_parameter.get(startIndex-1).getJuneToOneYear()),                            getDays(startTime,getYearEndData(startTime))+"",                            money+"X("+getStringNum(list_parameter.get(startIndex-1).                                    getJuneToOneYear())+"/360)X"+                                    getDays(startTime,getYearEndData(startTime))+"X"+multipleRate+"="+getStringNumR(count)                    ));                    integers.add(count);                    count+=money*((list_parameter.get(endIndex-1).                            getJuneToOneYear()/360)*multipleRate)*getDays(getYearStartData(endTime),endTime);                    calculation_info.add(getOneCal(                            formatDate(getYearStartData(endTime))+"-"+formatDate(endTime),                            getStringNum(list_parameter.get(endIndex-1).getJuneToOneYear()),                            getDays(getYearStartData(endTime),endTime)+"",                            money+"X("+getStringNum(list_parameter.get(endIndex-1).                                    getJuneToOneYear())+"/360)X"+                                    getDays(getYearStartData(endTime),endTime)+"X"+multipleRate+"="+getStringNumR(money*((list_parameter.get(endIndex-1).                                    getJuneToOneYear()/360)*multipleRate)*getDays(getYearStartData(endTime),endTime))                    ));                    integers.add(money*((list_parameter.get(endIndex-1).                            getJuneToOneYear()/360)*multipleRate)*getDays(getYearStartData(endTime),endTime));                }                break;            case MultipleRate.ONE_YEAR_TO_THERR_YEARS:                count=money*((list_parameter.get(startIndex-1).getOneYearToThreeYear()/360)*multipleRate)*getDays(startTime,getYearEndData(startTime));                calculation_info.add(getOneCal(                        formatDate(startTime)+"-"+formatDate(getYearEndData(startTime)),                        getStringNum(list_parameter.get(startIndex-1).getOneYearToThreeYear()),                        getDays(startTime,getYearEndData(startTime))+"",                        money+"X("+getStringNum(list_parameter.get(startIndex-1).                                getOneYearToThreeYear())+"/360)X"+                                getDays(startTime,getYearEndData(startTime))+"X"+multipleRate+"="+getStringNumR(count)                ));                integers.add(count);                for(int i=1;i<getYears(startTime,endTime);i++) {                    count+=addConut(getDate((startTime.getYear()+1900+i)+"-01-01"),                            money);                }                count+=money*((list_parameter.get(endIndex-1).getOneYearToThreeYear()/360)*multipleRate)*getDays(getYearStartData(endTime),endTime);                calculation_info.add(getOneCal(                        formatDate(getYearStartData(endTime))+"-"+formatDate(endTime),                        getStringNum(list_parameter.get(endIndex-1).getOneYearToThreeYear()),                        getDays(getYearStartData(endTime),endTime)+"",                        money+"X("+getStringNum(list_parameter.get(endIndex-1).                                getOneYearToThreeYear())+"/360)X"+                                getDays(getYearStartData(endTime),endTime)+"X"+multipleRate+"="+getStringNumR(money*((list_parameter.get(endIndex-1).                                getOneYearToThreeYear()/360)*multipleRate)*getDays(getYearStartData(endTime),endTime))                ));                integers.add(money*((list_parameter.get(endIndex-1).                        getOneYearToThreeYear()/360)*multipleRate)*getDays(getYearStartData(endTime),endTime));                break;            case MultipleRate.THERR_YEARS_TO_FIVE_YESRS:                count=money*((list_parameter.get(startIndex-1).getThreeYearToFiveYear()/360)*multipleRate)*getDays(startTime,getYearEndData(startTime));                calculation_info.add(getOneCal(                        formatDate(startTime)+"-"+formatDate(getYearEndData(startTime)),                        getStringNum(list_parameter.get(startIndex-1).getThreeYearToFiveYear()),                        getDays(startTime,getYearEndData(startTime))+"",                        money+"X("+getStringNum(list_parameter.get(startIndex-1).                                getThreeYearToFiveYear())+"/360)X"+                                getDays(startTime,getYearEndData(startTime))+"X"+multipleRate+"="+getStringNumR(count)                ));                integers.add(count);                for(int i=1;i<getYears(startTime,endTime);i++) {                    count+=addConut(getDate((startTime.getYear()+1900+i)+"-01-01"),                            money);                }                count+=money*((list_parameter.get(endIndex-1).getThreeYearToFiveYear()/360)*multipleRate)*getDays(getYearStartData(endTime),endTime);                calculation_info.add(getOneCal(                        formatDate(getYearStartData(endTime))+"-"+formatDate(endTime),                        getStringNum(list_parameter.get(endIndex-1).getThreeYearToFiveYear()),                        getDays(getYearStartData(endTime),endTime)+"",                        money+"X("+getStringNum(list_parameter.get(endIndex-1).                                getThreeYearToFiveYear())+"/360)X"+                                getDays(getYearStartData(endTime),endTime)+"X"+multipleRate+"="+getStringNumR(money*((list_parameter.get(endIndex-1).                                getThreeYearToFiveYear()/360)*multipleRate)*getDays(getYearStartData(endTime),endTime))                ));                integers.add(money*((list_parameter.get(endIndex-1).                        getThreeYearToFiveYear()/360)*multipleRate)*getDays(getYearStartData(endTime),endTime));                break;            case MultipleRate.MORE_THAN_FIVE_YEARS:                count=money*((list_parameter.get(startIndex-1).getMoreThanFiveYear()/360)*multipleRate)*getDays(startTime,getYearEndData(startTime));                calculation_info.add(getOneCal(                        formatDate(startTime)+"-"+formatDate(getYearEndData(startTime)),                        getStringNum(list_parameter.get(startIndex-1).getMoreThanFiveYear()),                        getDays(startTime,getYearEndData(startTime))+"",                        money+"X("+getStringNum(list_parameter.get(startIndex-1).                                getMoreThanFiveYear())+"/360)X"+                                getDays(startTime,getYearEndData(startTime))+"X"                                +multipleRate+"="+getStringNumR(count)                ));                integers.add(count);                for(int i=1;i<getYears(startTime,endTime);i++) {                    count+=addConut(getDate((startTime.getYear()+1900+i)+"-01-01"),                            money);                }                count+=money*((list_parameter.get(endIndex-1).getMoreThanFiveYear()/360)*multipleRate)*getDays(getYearStartData(endTime),endTime);                calculation_info.add(getOneCal(                        formatDate(getYearStartData(endTime))+"-"+formatDate(endTime),                        getStringNum(list_parameter.get(endIndex-1).getMoreThanFiveYear()),                        getDays(getYearStartData(endTime),endTime)+"",                        money+"X("+getStringNum(list_parameter.get(endIndex-1).                                getMoreThanFiveYear())+"/360)X"+                                getDays(getYearStartData(endTime),endTime)+"X"+multipleRate+"="+getStringNumR(money*((list_parameter.get(endIndex-1).                                getMoreThanFiveYear()/360)*multipleRate)*getDays(getYearStartData(endTime),endTime))                ));                integers.add(money*((list_parameter.get(endIndex-1).                        getMoreThanFiveYear()/360)*multipleRate)*getDays(getYearStartData(endTime),endTime));                break;        }        return count;    }    /**     * 两个时间之间的天数     *     * @param date1     * @param date2     * @return     */    public static long getDays(Date date1, Date date2) {        long day = (date2.getTime() - date1.getTime()) / (24 * 60 * 60 * 1000);        return day;    }    /**     * 两个时间之间的天数     *     * @param date1     * @param date2     * @return     */    public static int getYears(Date date1, Date date2) {        return date2.getYear()-date1.getYear();    }    /**     * 字符串yyyy-MM-dd  转 Date     *     * @param thisTime     *     * @return     */    public static Date getDate(String thisTime){        Date d;        SimpleDateFormat sf = new SimpleDateFormat("yyyy-MM-dd hh:mm:ss");        try {            d = sf.parse(thisTime+" 00:00:00");        } catch (ParseException e) {            e.printStackTrace();            return null;        }        return d;    }    /**     * 获取时间年份所在的最后一天     *     * @param date     *     * @return     */    public Date getYearEndData(Date date){        int yearNum=  (date.getYear()+1900);        String endDay=yearNum+"-12-31";        return  getDate(endDay);    }    /**     * 获取时间所在的最后一天     *     * @param date     *     * @return     */    public Date getYearStartData(Date date){        int yearNum=  (date.getYear()+1900);        String endDay=yearNum+"-01-01";        return  getDate(endDay);    }    /**     *比较两个时间 是否在同一年     *     * @param date1     * @param date2     *     * @return     */    public Boolean compareTowTime(Date date1, Date date2){        if(date1.getYear()==date2.getYear())            return true;        else            return  false;    }    /**     *完整年度利率计算     *     * @param date1     * @param     *     * @return     */    public double addConut(Date date1, double money){        int  docIndex=35;        double  conut=0;        for (int i = 0; i < list_parameter.size(); i++) {            if (list_parameter.get(i).                    getCalculateTiem().                    getTime() > date1.getTime()) {                docIndex=i;                break;            }        }        switch (rateType){            case MultipleRate.ONE_YEAR_TO_THERR_YEARS:                conut= money*((list_parameter.get(docIndex-1).getOneYearToThreeYear()/360)*multipleRate)*getDays(getYearStartData(date1),getYearEndData(date1));                calculation_info.add(getOneCal(                        formatDate(getYearStartData(date1))+"-"+formatDate(getYearEndData(date1)),                        getStringNum(list_parameter.get(docIndex-1).getOneYearToThreeYear()),                        getDays(getYearStartData(date1),getYearEndData(date1))+"",                        money+"X("+getStringNum(list_parameter.get(docIndex-1).                                getOneYearToThreeYear())+"/360)X"+                                getDays(getYearStartData(date1),getYearEndData(date1))+"X"+multipleRate+"="+getStringNumR(conut)                ));                break;            case MultipleRate.THERR_YEARS_TO_FIVE_YESRS:                conut= money*((list_parameter.get(docIndex-1).getThreeYearToFiveYear()/360)*multipleRate)*getDays(getYearStartData(date1),getYearEndData(date1));                calculation_info.add(getOneCal(                        formatDate(getYearStartData(date1))+"-"+formatDate(getYearEndData(date1)),                        getStringNum(list_parameter.get(docIndex-1).getThreeYearToFiveYear()),                        getDays(getYearStartData(date1),getYearEndData(date1))+"",                        money+"X("+getStringNum(list_parameter.get(docIndex-1).                                getThreeYearToFiveYear())+"/360)X"+                                getDays(getYearStartData(date1),getYearEndData(date1))+"X"+multipleRate+"="+getStringNumR(conut)                ));                break;            case MultipleRate.MORE_THAN_FIVE_YEARS:                conut= money*((list_parameter.get(docIndex-1).getMoreThanFiveYear()/360)*multipleRate)*getDays(getYearStartData(date1),getYearEndData(date1));                calculation_info.add(getOneCal(                        formatDate(getYearStartData(date1))+"-"+formatDate(getYearEndData(date1)),                        getStringNum(list_parameter.get(docIndex-1).getMoreThanFiveYear()),                        getDays(getYearStartData(date1),getYearEndData(date1))+"",                        money+"X("+getStringNum(list_parameter.get(docIndex-1).                                getMoreThanFiveYear())+"/360)X"+                                getDays(getYearStartData(date1),getYearEndData(date1))+"X"+multipleRate+"="+getStringNumR(conut)                ));                break;        }        integers.add(conut);        return  conut;    }    /**     *转换成显示年限     *     * @param date     * @param     *     * @return     */    public  String formatDate(Date date)  {        SimpleDateFormat sdf22 = new SimpleDateFormat("yyyy.MM.dd");        return sdf22.format(date);    }    public List<Calculation> getallCalculation(){        return calculation_info;    }    public   Calculation  getOneCal(String time,String value,String days,String com){        return new  Calculation(time,                "银行基准利息:"+value,                "计算天数:"+days,                "借贷利息:"+com);    }    public String getStringNum(Double result1){        DecimalFormat df = new DecimalFormat("0.00%");        return df.format(result1);    }    public String getStringNumR(Double result1){        DecimalFormat df = new DecimalFormat("0.00");        return df.format(result1);    }    public  String  getToa(){        double count=0;        StringBuffer stringBuffer=new StringBuffer("合计:");        for (int i=0;i<integers.size();i++){            if(i==0){                stringBuffer.append(getStringNumR(integers.get(i))+"");            }else {                stringBuffer.append("+"+getStringNumR(integers.get(i)));            }            count+=integers.get(i);        }        stringBuffer.append("="+getStringNumR(count));        return stringBuffer.toString();    }}